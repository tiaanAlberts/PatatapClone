<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Patatap Clone</title>
    <link rel="stylesheet" href="/stylesheets/styles.css">
    <script type="text/javascript" src="/scripts/paper-full.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.1.2/howler.core.min.js"></script>
    
    <script type="text/paperscript" canvas="myCanvas"> 
        
        var keyData = { //sounds and colours of each key a to z
            q: {
                sound: new Howl({
                    src: ['sounds/bubbles.mp3']
                }),
                color: '#1abc9c'
            },
            w: {
                sound: new Howl({
                    src: ['sounds/clay.mp3']
                }),
                color: '#2ecc71'
            },
            e: {
                sound: new Howl({
                    src: ['sounds/confetti.mp3']
                }),
                color: '#3498db'
            },
            r: {
                sound: new Howl({
                    src: ['sounds/corona.mp3']
                }),
                color: '#9b59b6'
            },
            t: {
                sound: new Howl({
                    src: ['sounds/dotted-spiral.mp3']
                }),
                color: '#34495e'
            },
            y: {
                sound: new Howl({
                    src: ['sounds/flash-1.mp3']
                }),
                color: '#16a085'
            },
            u: {
                sound: new Howl({
                    src: ['sounds/flash-2.mp3']
                }),
                color: '#27ae60'
            },
            i: {
                sound: new Howl({
                    src: ['sounds/flash-3.mp3']
                }),
                color: '#2980b9'
            },
            o: {
                sound: new Howl({
                    src: ['sounds/glimmer.mp3']
                }),
                color: '#8e44ad'
            },
            p: {
                sound: new Howl({
                    src: ['sounds/moon.mp3']
                }),
                color: '#2c3e50'
            },
            a: {
                sound: new Howl({
                    src: ['sounds/pinwheel.mp3']
                }),
                color: '#f1c40f'
            },
            s: {
                sound: new Howl({
                    src: ['sounds/piston-1.mp3']
                }),
                color: '#e67e22'
            },
            d: {
                sound: new Howl({
                    src: ['sounds/piston-2.mp3']
                }),
                color: '#e74c3c'
            },
            f: {
                sound: new Howl({
                    src: ['sounds/prism-1.mp3']
                }),
                color: '#95a5a6'
            },
            g: {
                sound: new Howl({
                    src: ['sounds/prism-2.mp3']
                }),
                color: '#f39c12'
            },
            h: {
                sound: new Howl({
                    src: ['sounds/prism-3.mp3']
                }),
                color: '#d35400'
            },
            j: {
                sound: new Howl({
                    src: ['sounds/splits.mp3']
                }),
                color: '#1abc9c'
            },
            k: {
                sound: new Howl({
                    src: ['sounds/squiggle.mp3']
                }),
                color: '#2ecc71'
            },
            l: {
                sound: new Howl({
                    src: ['sounds/strike.mp3']
                }),
                color: '#3498db'
            },
            z: {
                sound: new Howl({
                    src: ['sounds/suspension.mp3']
                }),
                color: '#9b59b6'
            },
            x: {
                sound: new Howl({
                    src: ['sounds/timer.mp3']
                }),
                color: '#34495e'
            },
            c: {
                sound: new Howl({
                    src: ['sounds/ufo.mp3']
                }),
                color: '#16a085'
            },
            v: {
                sound: new Howl({
                    src: ['sounds/veil.mp3']
                }),
                color: '#27ae60'
            },
            b: {
                sound: new Howl({
                    src: ['sounds/wipe.mp3']
                }),
                color: '#2980b9'
            },
            n: {
                sound: new Howl({
                    src: ['sounds/zig-zag.mp3']
                }),
                color: '#8e44ad'
            },
            m: {
                sound: new Howl({
                    src: ['sounds/moon.mp3']
                }),
                color: '#2c3e50'
            }
        }
        
        var circles = [];
        
        function onKeyDown(event) { //When a key is pressed down, execute
            if(keyData[event.key]){ //If one of the keys in keyData is pressed, execute
                var maxPoint = new Point(view.size.width, view.size.height); //save max point of window
                var randomPoint = Point.random(); //generate and save random point
                var point = maxPoint * randomPoint; //generate save random point < max point
                var newCircle = new Path.Circle(point, 500); //create new circle from random point
                newCircle.fillColor = keyData[event.key].color; //make newCircle's color same as key in obj
                keyData[event.key].sound.play(); //play sound of key in obj
                circles.push(newCircle); //push newCircle into circles arr
            };
        };
        
        function onFrame(event){ //PaperJS function is called automatically
            for(var i = 0; i < circles.length; i++){ 
                circles[i].fillColor.hue += 1; //color will change by 1 per frame
                circles[i].scale(.9); //set rate at which circle scales down
                if(circles[i].area < 1){ //if circle goes out of view
                    circles[i].remove(); // remove the circle from the canvas
                    circles.splice(i, 1); // remove the circle from the array
                    console.log(circles);
                }; 
            };
            
        };
        
    </script>
    
</head>
<body>
    <canvas id="myCanvas" resize></canvas>
</body>
</html>